from django.test import TestCase
from django.contrib.auth.models import User
from cloudbookapp.models import Note
from django.core.exceptions import ValidationError
from django.contrib.auth.password_validation import get_default_password_validators
from .forms import CustomUserCreationForm, CustomAuthenticationForm, NoteForm

# Create your tests here.

# NoteModelTestCase is generated by chatGPT
class NoteModelTestCase(TestCase):
    def setUp(self):
        # Create a user for testing
        self.user = User.objects.create_user(
            username='testuser',
            password='testpassword'
        )
    def test_note_creation(self):
        # Create a note
        note = Note.objects.create(
            user=self.user,
            title='Test Note',
            content='This is a test note'
        )
        # Retrieve the note from the database
        saved_note = Note.objects.get(id=note.id)
        # Assert that the retrieved note is the same as the created note
        self.assertEqual(saved_note.title, 'Test Note')
        self.assertEqual(saved_note.content, 'This is a test note')
        self.assertEqual(saved_note.user, self.user)
        # Assert the string representation of the note
        self.assertEqual(str(note), 'Test Note')
        # Assert the created_at and updated_at fields are set
        self.assertIsNotNone(saved_note.created_at)
        self.assertIsNotNone(saved_note.updated_at)


class CustomUserCreationFormTestCase(TestCase):

    def test_form_valid_data(self):
        form = CustomUserCreationForm({
            'username': 'testusername',
            'password1': 'testpw123',
            'password2': 'testpw123',
        })
        self.assertTrue(form.is_valid())

    def test_form_username_taken(self):
        User.objects.create_user(username='testusername')
        form = CustomUserCreationForm({
            'username': 'testusername',
            'password1': 'testpw123',
            'password2': 'testpw123',
        })
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['username'], ['Username is not available.'])

    def test_passwords_dont_match(self):
        form = CustomUserCreationForm({
            'username': 'testusername',
            'password1': 'testpw123',
            'password2': 'testpw122',
        })
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['password2'], ['Passwords dont match'])


# Testing CustomAuthenticationForm
class CustomAuthenticationFormTestCase(TestCase):

    def setUp(self):
        self.credentials = {
            'username': 'testusername',
            'password': 'testpw123'
        }
        User.objects.create_user(**self.credentials)

    def test_form_valid(self):
        form = CustomAuthenticationForm(data=self.credentials)
        self.assertTrue(form.is_valid())

    def test_form_invalid_password(self):
        form = CustomAuthenticationForm(data=self.credentials)
        self.credentials['password'] = 'wrongpassword'
        form = CustomAuthenticationForm(data=self.credentials)
        self.assertFalse(form.is_valid())

    def test_form_invalid_username(self):
        form = CustomAuthenticationForm(data=self.credentials)
        self.credentials['username'] = 'wrongusername'
        form = CustomAuthenticationForm(data=self.credentials)
        self.assertFalse(form.is_valid())
